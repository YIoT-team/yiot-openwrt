#!/bin/sh /etc/rc.common
# YIoT security provisioning tool

YIOT_BIN="/usr/bin/yiot"
YIOT_LOG="/tmp/yiot.log"

START=90

USE_PROCD=1

check_param() {
    if [ z"${1}" == "z" ]; then
      echo "${2} is not set"
      exit 1
    fi
}

start_service() {
    local ACTIVE="$(uci_get yiot.provision.active)"
    local MTD_DEVICE="$(uci_get yiot.provision.mtd)"
    local NETIF="$(uci_get yiot.provision.netif)"
    local MANUFACTURER="$(uci_get yiot.provision.manufacturer)"
    local MODEL="$(uci_get yiot.provision.model)"
    local SERIAL="$(uci_get yiot.provision.serial)"
    local DEBUG="$(uci_get yiot.provision.debug)"
    local SUBNET="$(uci_get yiot.provision.subnet)"

    DEBUG_PARAM=""
    if [ "${DEBUG}" == "1" ]; then
        DEBUG_PARAM="--debug"
    fi 

    # Check if tool is active
    if [ "${ACTIVE}" == "0" ]; then
        return
    fi

    # Check if MTD device is present
    # if [ ! -f "${MTD_DEVICE}" ]; then
    #   echo "MTD device doesn't exist ${MTD_DEVICE}"
    #   return
    # fi

    # Check other parameters
    check_param "${NETIF}" "Network interface"
    check_param "${MANUFACTURER}" "Manufacturer"
    check_param "${MODEL}" "Model"
    check_param "${SERIAL}" "Serial number"

    SUBNET_DETECTOR="/opt/yiot/pc/scripts/get-subnet.sh"
    if [ -f "${SUBNET_DETECTOR}" ]; then
        SUBNET=$(${SUBNET_DETECTOR})
    fi

    echo "Starting YIoT Security provisioning"

    procd_open_instance
    procd_set_param respawn
    if [ z"${SUBNET}" != "z" ]; then
        procd_set_param env VS_BCAST_SUBNET_ADDR="${SUBNET}"
    fi
    procd_set_param command /bin/sh -c "${YIOT_BIN} ${DEBUG_PARAM} --mtd ${MTD_DEVICE} \
                                          --interface ${NETIF} \
                                          --manufacturer ${MANUFACTURER} \
                                          --model ${MODEL} \
                                          --serial ${SERIAL} \
                                          > ${YIOT_LOG} 2>&1"

    procd_close_instance
}

stop() {
	killall yiot
}
